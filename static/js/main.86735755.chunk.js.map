{"version":3,"sources":["components/Statistics/Statistics.module.css","components/FeedbackOptions/FeedbackOptions.module.css","components/Title/Title.module.css","components/Notification/Notifications.module.css","components/FeedbackOptions/FeedbackOptions.jsx","components/Title/Title.jsx","components/Notification/Notifications.jsx","components/Statistics/Statistics.jsx","App.js","reportWebVitals.js","index.js"],"names":["module","exports","FeedbackOptions","options","onLeaveFeedback","map","option","type","onClick","className","s","btn","prototypes","PropTypes","string","isRequired","func","Section","title","children","Notification","message","notice","Statistics","good","neutral","bad","total","percentage","list","item","positive","middle","negative","sum","percents","App","useState","setGoog","setNeutral","setBad","countTotalFeedback","keys","Object","e","target","textContent","Math","round","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.86735755.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"list\":\"Statistics_list__3yBtk\",\"item\":\"Statistics_item__3ZTjr\",\"positive\":\"Statistics_positive__3Jlcj\",\"middle\":\"Statistics_middle__1N8H-\",\"negative\":\"Statistics_negative__AcW3m\",\"sum\":\"Statistics_sum__PejAu\",\"percents\":\"Statistics_percents__57wMu\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"btn\":\"FeedbackOptions_btn__28x6x\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"section\":\"Title_section__2JEYy\",\"title\":\"Title_title__cGEUx\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"notice\":\"Notifications_notice__1SGrb\"};","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport s from './FeedbackOptions.module.css';\r\n\r\nconst FeedbackOptions = ({ options, onLeaveFeedback }) => {\r\n    return (\r\n    <>\r\n      <ul>\r\n        {options.map(option => (\r\n            <button\r\n                key={option}\r\n                type=\"button\"\r\n                onClick={onLeaveFeedback}\r\n                className={s.btn}\r\n            >\r\n              {option}\r\n            </button>\r\n        ))}\r\n      </ul>\r\n    </>\r\n  );\r\n}\r\n\r\nFeedbackOptions.prototypes = {\r\n    options: PropTypes.string.isRequired,\r\n    onLeaveFeedback: PropTypes.func.isRequired,\r\n};\r\n\r\nexport default FeedbackOptions;\r\n\r\n","import PropTypes from \"prop-types\";\r\nimport s from \"./Title.module.css\";\r\n\r\nconst Section = ({ title, children }) => {\r\n    return (\r\n        <div>\r\n            <h2 className={s.title}>{title}</h2>\r\n              { children }\r\n        </div>\r\n    );\r\n};\r\n\r\nSection.propTypes = {\r\n    title: PropTypes.string.isRequired,\r\n    children: PropTypes.element.isRequired,\r\n};\r\n\r\nexport default Section;","import React from \"react\";\r\nimport PropTypes from \"prop-types\";\r\nimport s from \"./Notifications.module.css\";\r\n\r\nconst Notification = ({ message }) => {\r\n  return <p className={s.notice}>{message}</p>;\r\n};\r\n\r\nNotification.propTypes = {\r\n  message: PropTypes.string.isRequired,\r\n};\r\n\r\nexport default Notification;","import React from \"react\";\r\nimport PropTypes from \"prop-types\";\r\nimport Notification from \"../Notification/Notifications\";\r\nimport s from \"./Statistics.module.css\";\r\n\r\nconst Statistics = ({ good, neutral, bad, total, percentage }) => (\r\n  <div>\r\n    {total > 0 ? (\r\n      <ul className={s.list}>\r\n        <li className={s.item}>\r\n          <span className={s.positive}>Good: {good}</span>\r\n        </li>\r\n        <li className={s.item}>\r\n          <span className={s.middle}>Neutral: {neutral}</span>\r\n        </li>\r\n        <li className={s.item}>\r\n          <span className={s.negative}>Bad: {bad}</span>\r\n        </li>\r\n        <li className={s.item}>\r\n          <span className={s.sum}>Total: {total}</span>\r\n        </li>\r\n        <li className={s.item}>\r\n          <span className={s.percents}>Positive feedback: {percentage} %</span>\r\n        </li>\r\n      </ul>\r\n    ) : (\r\n      <Notification message={\"No feedback given\"} />\r\n    )}\r\n  </div>\r\n);\r\n\r\nexport default Statistics;\r\n\r\nStatistics.propTypes = {\r\n  good: PropTypes.number.isRequired,\r\n  neutral: PropTypes.number.isRequired,\r\n  bad: PropTypes.number.isRequired,\r\n  total: PropTypes.number.isRequired,\r\n  percentage: PropTypes.number.isRequired,\r\n};\r\n","// import React, { Component } from \"react\";\nimport FeedbackOptions from \"./components/FeedbackOptions/FeedbackOptions\";\nimport Section from \"./components/Title/Title\";\nimport Statistics from \"./components/Statistics/Statistics\";\nimport Notification from \"./components/Notification/Notifications\";\nimport \"./App.css\";\nimport { useState } from \"react\";\n\nexport default function App() {\n  const [good, setGoog] = useState(0);\n  const [neutral, setNeutral] = useState(0);\n  const [bad, setBad] = useState(0);\n\n  const handleButtonClick = (e) => {\n    switch (e.target.textContent) {\n      case \"good\":\n        setGoog(good + 1);\n        break;\n      case \"neutral\":\n        setNeutral(neutral + 1);\n        break;\n      case \"bad\":\n        setBad(bad + 1);\n        break;\n      default:\n        return;\n    }\n  };\n\n  function countTotalFeedback() {\n    return good + neutral + bad;\n  }\n\n  function countPositiveFeedbackPercentage() {\n    return Math.round((good / countTotalFeedback()) * 100);\n  }\n\n  const keys = Object.keys({ good, neutral, bad });\n\n  return (\n    <Section title=\"Please leave feedback\">\n      <FeedbackOptions\n        options={keys}\n        onLeaveFeedback={handleButtonClick}\n      ></FeedbackOptions>\n      {countTotalFeedback() ? (\n        <Statistics\n          title=\"Statistics\"\n          good={good}\n          neutral={neutral}\n          bad={bad}\n          total={countTotalFeedback()}\n          percentage={countPositiveFeedbackPercentage()}\n        />\n      ) : (\n        <Notification message=\"No feedback given\" />\n      )}\n    </Section>\n  );\n}\n\n// export default App;\n","const reportWebVitals = (onPerfEntry) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import(\"web-vitals\").then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport reportWebVitals from \"./reportWebVitals\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}